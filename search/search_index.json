{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"English \u2003 Fran\u00e7ais","title":"Home"},{"location":"code/","text":"Fran\u00e7ais Code Repository The cffdrs-ng GitHub repository contains the up-to-date code for the CFFDRS2025 modules in three programming languages: C , Python , and R ( all C code is still under development ). These three versions are written to produce the same results so users can choose the version that fits their own software systems. See the repository README for more information about how to provide bug reports, the structure of the repository, and our updating process. For email notifications about code updates, you can specify the type of updates to receive when you join our mailing list . Capabilities Calculate hourly FWI codes and indices Calculate daily summaries of FWI metrics at peak burn time Calculate hourly grassland code and indices Calculate sunrise, sunset from date and location, and additionally solar radiation from local weather data Convert traditional daily noon weather data into daily minimum/maximum weather data Convert daily minimum/maximum weather data into hourly weather data FWI2025 The Canadian Forest Fire Weather Index (FWI) is a major system of the CFFDRS. FWI2025 is the next generation FWI system found in CFFDRS2025. Select a programming language below to see a description of the required code files and input data along with documentation of the main functions. FWI2025 C (under development) \u2003 FWI2025 Python \u2003 FWI2025 R License The NG-CFFDRS scripts are licensed under the GNU General Public License version 2. A copy of the license is available on the GitHub repository .","title":"Code"},{"location":"code/#code","text":"","title":"Code"},{"location":"code/#repository","text":"The cffdrs-ng GitHub repository contains the up-to-date code for the CFFDRS2025 modules in three programming languages: C , Python , and R ( all C code is still under development ). These three versions are written to produce the same results so users can choose the version that fits their own software systems. See the repository README for more information about how to provide bug reports, the structure of the repository, and our updating process. For email notifications about code updates, you can specify the type of updates to receive when you join our mailing list .","title":"Repository"},{"location":"code/#capabilities","text":"Calculate hourly FWI codes and indices Calculate daily summaries of FWI metrics at peak burn time Calculate hourly grassland code and indices Calculate sunrise, sunset from date and location, and additionally solar radiation from local weather data Convert traditional daily noon weather data into daily minimum/maximum weather data Convert daily minimum/maximum weather data into hourly weather data","title":"Capabilities"},{"location":"code/#fwi2025","text":"The Canadian Forest Fire Weather Index (FWI) is a major system of the CFFDRS. FWI2025 is the next generation FWI system found in CFFDRS2025. Select a programming language below to see a description of the required code files and input data along with documentation of the main functions. FWI2025 C (under development) \u2003 FWI2025 Python \u2003 FWI2025 R","title":"FWI2025"},{"location":"code/#license","text":"The NG-CFFDRS scripts are licensed under the GNU General Public License version 2. A copy of the license is available on the GitHub repository .","title":"License"},{"location":"contact/","text":"Fran\u00e7ais Contact NG-CFFDRS is being updated by the Canadian Forest Service Fire Danger Group. For code feedback and bug reports refer to the CONTRIBUTING.md file on the GitHub repository . For all other inquiries, scientific or general, or website feedback, please send an email to: firedanger-dangerincendie@nrcan-rncan.gc.ca Any feedback to help make this a better resource is greatly appreciated! Fire Danger Group Members Gabrielle Ayres (she, her | elle, elle) Research Mobilization Analyst Bio gabrielle.ayres@nrcan-rncan.gc.ca Jonathan Boucher Wildland Fire Research Scientist Bio jonathan.boucher@nrcan-rncan.gc.ca Luke Collins Research Scientist luke.collins@nrcan-rncan.gc.ca Anne Cotton-Gagnon (elle, elle | she, her) Forest Fire Research Officer Bio anne.cotton-gagnon@nrcan-rncan.gc.ca Patrick Deane (he, him | il, lui) Forest Fire Research Specialist Bio patrick.deane@nrcan-rncan.gc.ca Chelene Hanes Wildland Fire Research Scientist Bio chelene.hanes@nrcan-rncan.gc.ca Natasha Jurko Physical Fire Scientist natasha.jurko@nrcan-rncan.gc.ca Samuel Lacarte (he, him | il, lui) Fire Research Officer samuel.lacarte@nrcan-rncan.gc.ca Daniel Perrakis Research Scientist daniel.perrakis@nrcan-rncan.gc.ca Mackenzie Simpson IT Analyst mackenzie.simpson@nrcan-rncan.gc.ca Kevin Siu (he, him | il, lui) Fire Analyst Programmer Bio kevin.siu@nrcan-rncan.gc.ca Steve Taylor Forest Fire Research Scientist steve.taylor@nrcan-rncan.gc.ca Daniel Thompson (he, him | il, lui) Forest Fire Research Scientist daniel.thompson@nrcan-rncan.gc.ca Derek van der Kamp Research Scientist derek.vanderkamp@nrcan-rncan.gc.ca Mike Wotton Forest Fire Research Scientist Bio (Firelab) mike.wotton@daniels.utoronto.ca","title":"Contact"},{"location":"contact/#contact","text":"NG-CFFDRS is being updated by the Canadian Forest Service Fire Danger Group. For code feedback and bug reports refer to the CONTRIBUTING.md file on the GitHub repository . For all other inquiries, scientific or general, or website feedback, please send an email to: firedanger-dangerincendie@nrcan-rncan.gc.ca Any feedback to help make this a better resource is greatly appreciated!","title":"Contact"},{"location":"contact/#fire-danger-group-members","text":"Gabrielle Ayres (she, her | elle, elle) Research Mobilization Analyst Bio gabrielle.ayres@nrcan-rncan.gc.ca Jonathan Boucher Wildland Fire Research Scientist Bio jonathan.boucher@nrcan-rncan.gc.ca Luke Collins Research Scientist luke.collins@nrcan-rncan.gc.ca Anne Cotton-Gagnon (elle, elle | she, her) Forest Fire Research Officer Bio anne.cotton-gagnon@nrcan-rncan.gc.ca Patrick Deane (he, him | il, lui) Forest Fire Research Specialist Bio patrick.deane@nrcan-rncan.gc.ca Chelene Hanes Wildland Fire Research Scientist Bio chelene.hanes@nrcan-rncan.gc.ca Natasha Jurko Physical Fire Scientist natasha.jurko@nrcan-rncan.gc.ca Samuel Lacarte (he, him | il, lui) Fire Research Officer samuel.lacarte@nrcan-rncan.gc.ca Daniel Perrakis Research Scientist daniel.perrakis@nrcan-rncan.gc.ca Mackenzie Simpson IT Analyst mackenzie.simpson@nrcan-rncan.gc.ca Kevin Siu (he, him | il, lui) Fire Analyst Programmer Bio kevin.siu@nrcan-rncan.gc.ca Steve Taylor Forest Fire Research Scientist steve.taylor@nrcan-rncan.gc.ca Daniel Thompson (he, him | il, lui) Forest Fire Research Scientist daniel.thompson@nrcan-rncan.gc.ca Derek van der Kamp Research Scientist derek.vanderkamp@nrcan-rncan.gc.ca Mike Wotton Forest Fire Research Scientist Bio (Firelab) mike.wotton@daniels.utoronto.ca","title":"Fire Danger Group Members"},{"location":"home/","text":"Fran\u00e7ais Home About The Canadian Forest Fire Danger Rating System (CFFDRS) is the principal source of fire information for all wildland fire management agencies across Canada. It has widespread use as a regional and fireline safety and awareness tool. The CFFDRS is undergoing extensive revisions under the name Next Generation CFFDRS (NG-CFFDRS) , with rollout to practitioners occurring during 2024, 2025, and beyond. The primary goal is update the System to allow for the use of modern technology and data sources while maintaining its original simplicity and effectiveness. This website is intended to: inform users about the ongoing changes to the CFFDRS centralize access to the code and documentation host tutorials for new users in multiple programming languages Join our newsletter mailing list to get email updates about the latest developments with CFFDRS2025. For those unfamiliar with the CFFDRS, or for official information regarding wildfires in Canada, read more on official Government of Canada pages under Resources#Overview . The previous CFFDRS1992 code can still be found on the CFFDRS GitHub , while the R documentation can be found on the CFFDRS CRAN page . Announcements September 2025 A major code update for FWI2025 has been released to the cffdrs-ng GitHub repository . It includes changes to the options when running hFWI() , the repository file structure, and how DMC and solar radiation are calculated. More details and the rest of the changes can be found on the GitHub changelog . This website has also been updated to have up-to-date documentation in Code and Tutorials . Past Announcements August 2025 A minor update has been released to the cffdrs-ng GitHub repository. The specific changes can be found on the GitHub changelog , which also includes extra details about the next (to be released) update. A running list of capabilities is now available. Natasha Jurko and Gabrielle Ayres hosted the second Fire Danger Group webinar about the new FWI2025 changes in comparison to the FWI1987 version. The recording is available on the Resources page . June 2025 We have recently updated the cffdrs-ng GitHub repository README description and contributing guidelines (how to provide code feedback and bug reports). Coming soon, we will be releasing our list of capabilities, FAQ, and roadmap detailing our code updating process for CFFDRS2025. And as always, you can contact us with your ideas and general inquiries at our team email: firedanger-dangerincendie@nrcan-rncan.gc.ca May 2025 Natasha Jurko and Sam LaCarte hosted a webinar introducing the grassland components of the NG-FWI (FWI2025) on May 22nd. This was the first of a series of webinars designed to facilitate discussions with the Fire Danger Group. The recording will be made publicly available on this website at the beginning of June. In the meantime, you can email us if you would like to have access to the recording. March 2025 The first edition of the newsletter is available now under Resources#Newsletter . It goes over the new features of the Fire Weather Index (FWI2025) including the ability to use hourly data and the introduction of outputs for grasslands. January 2025 The NG-CFFDRS Fire Weather Index (FWI) System module is available for users to test. Release of the other modules of the CFFDRS (e.g. FBP System, FMS, and FOP System) is ongoing.","title":"Home"},{"location":"home/#home","text":"","title":"Home"},{"location":"home/#about","text":"The Canadian Forest Fire Danger Rating System (CFFDRS) is the principal source of fire information for all wildland fire management agencies across Canada. It has widespread use as a regional and fireline safety and awareness tool. The CFFDRS is undergoing extensive revisions under the name Next Generation CFFDRS (NG-CFFDRS) , with rollout to practitioners occurring during 2024, 2025, and beyond. The primary goal is update the System to allow for the use of modern technology and data sources while maintaining its original simplicity and effectiveness. This website is intended to: inform users about the ongoing changes to the CFFDRS centralize access to the code and documentation host tutorials for new users in multiple programming languages Join our newsletter mailing list to get email updates about the latest developments with CFFDRS2025. For those unfamiliar with the CFFDRS, or for official information regarding wildfires in Canada, read more on official Government of Canada pages under Resources#Overview . The previous CFFDRS1992 code can still be found on the CFFDRS GitHub , while the R documentation can be found on the CFFDRS CRAN page .","title":"About"},{"location":"home/#announcements","text":"","title":"Announcements"},{"location":"home/#september-2025","text":"A major code update for FWI2025 has been released to the cffdrs-ng GitHub repository . It includes changes to the options when running hFWI() , the repository file structure, and how DMC and solar radiation are calculated. More details and the rest of the changes can be found on the GitHub changelog . This website has also been updated to have up-to-date documentation in Code and Tutorials .","title":"September 2025"},{"location":"home/#past-announcements","text":"","title":"Past Announcements"},{"location":"home/#august-2025","text":"A minor update has been released to the cffdrs-ng GitHub repository. The specific changes can be found on the GitHub changelog , which also includes extra details about the next (to be released) update. A running list of capabilities is now available. Natasha Jurko and Gabrielle Ayres hosted the second Fire Danger Group webinar about the new FWI2025 changes in comparison to the FWI1987 version. The recording is available on the Resources page .","title":"August 2025"},{"location":"home/#june-2025","text":"We have recently updated the cffdrs-ng GitHub repository README description and contributing guidelines (how to provide code feedback and bug reports). Coming soon, we will be releasing our list of capabilities, FAQ, and roadmap detailing our code updating process for CFFDRS2025. And as always, you can contact us with your ideas and general inquiries at our team email: firedanger-dangerincendie@nrcan-rncan.gc.ca","title":"June 2025"},{"location":"home/#may-2025","text":"Natasha Jurko and Sam LaCarte hosted a webinar introducing the grassland components of the NG-FWI (FWI2025) on May 22nd. This was the first of a series of webinars designed to facilitate discussions with the Fire Danger Group. The recording will be made publicly available on this website at the beginning of June. In the meantime, you can email us if you would like to have access to the recording.","title":"May 2025"},{"location":"home/#march-2025","text":"The first edition of the newsletter is available now under Resources#Newsletter . It goes over the new features of the Fire Weather Index (FWI2025) including the ability to use hourly data and the introduction of outputs for grasslands.","title":"March 2025"},{"location":"home/#january-2025","text":"The NG-CFFDRS Fire Weather Index (FWI) System module is available for users to test. Release of the other modules of the CFFDRS (e.g. FBP System, FMS, and FOP System) is ongoing.","title":"January 2025"},{"location":"resources/","text":"Fran\u00e7ais Resources Newsletter Volume 1, Issue 1 (March 2025) \ud83d\udce5 Volume 1, Issue 2 - Grasslands (August 2025) \ud83d\udce5 Sign-up To receive our newsletters directly to your inbox, fill out the form at the link below. We will not share your data and will only send you information related to CFFDRS. Newsletter Sign-up Form (Microsoft Forms) Seminar Series In these Fire Danger Group seminars, we are looking to connect directly with fire management agencies and other end users of the CFFDRS to communicate the new and ongoing updates. Anyone is welcome to attend. To get notifications about when our next live seminar will be, sign up to our mailing list at the form above. Videos of past seminars will be available here shortly after each session. If you\u2019re experiencing issues with the video player, try refreshing this page. If the problem persists, click on 'Watch video on YouTube' in the video player. Grasslands in the Fire Weather Index System (May 2025) Interpreting Outputs and the Shift to Hourly Weather Inputs (August 2025) Reports NG-CFFDRS NG-CFFDRS Overview (GLC-X-26) FWI2025 Structure, Changes, and Interpretation (GLC-X-42) CFFDRS2025 Solar Radiation Input (Draft) \ud83d\udce5 Field Guides Sampling Fuels in the Context of the NG-CFFDRS \ud83d\udce5 Canadian FBP System 3rd edition (Red Book) Predicting Fire Behaviour in Ontario's Tallgrass Prairie (Yellow Book) CFFDRS1992 FWI1987 Development and Structure FBP1992 Development and Structure (ST-X-3) FBP1992 Updates and Revisions (GLC-X-10) Weather Guide for the CFFDRS More current and historical CFFDRS documentation can be found on the NRCan Open S&T Repository (OSTR) . Maps Canadian Wildland Fire Information System (CWFIS) Canadian Interagency Forest Fire Centre (CIFFC) National Forest Information System (NFIS) Forest Atlas Global Wildfire Information System (GWIS) Overview Forest fires Fire management Canadian Forest Fire Danger Rating System (CFFDRS) Government of Canada Natural Resources Canada Link Hubs Wildland fires Wildfires","title":"Resources"},{"location":"resources/#resources","text":"","title":"Resources"},{"location":"resources/#newsletter","text":"Volume 1, Issue 1 (March 2025) \ud83d\udce5 Volume 1, Issue 2 - Grasslands (August 2025) \ud83d\udce5","title":"Newsletter"},{"location":"resources/#sign-up","text":"To receive our newsletters directly to your inbox, fill out the form at the link below. We will not share your data and will only send you information related to CFFDRS. Newsletter Sign-up Form (Microsoft Forms)","title":"Sign-up"},{"location":"resources/#seminar-series","text":"In these Fire Danger Group seminars, we are looking to connect directly with fire management agencies and other end users of the CFFDRS to communicate the new and ongoing updates. Anyone is welcome to attend. To get notifications about when our next live seminar will be, sign up to our mailing list at the form above. Videos of past seminars will be available here shortly after each session. If you\u2019re experiencing issues with the video player, try refreshing this page. If the problem persists, click on 'Watch video on YouTube' in the video player.","title":"Seminar Series"},{"location":"resources/#grasslands-in-the-fire-weather-index-system-may-2025","text":"","title":"Grasslands in the Fire Weather Index System (May 2025)"},{"location":"resources/#interpreting-outputs-and-the-shift-to-hourly-weather-inputs-august-2025","text":"","title":"Interpreting Outputs and the Shift to Hourly Weather Inputs (August 2025)"},{"location":"resources/#reports","text":"NG-CFFDRS NG-CFFDRS Overview (GLC-X-26) FWI2025 Structure, Changes, and Interpretation (GLC-X-42) CFFDRS2025 Solar Radiation Input (Draft) \ud83d\udce5 Field Guides Sampling Fuels in the Context of the NG-CFFDRS \ud83d\udce5 Canadian FBP System 3rd edition (Red Book) Predicting Fire Behaviour in Ontario's Tallgrass Prairie (Yellow Book) CFFDRS1992 FWI1987 Development and Structure FBP1992 Development and Structure (ST-X-3) FBP1992 Updates and Revisions (GLC-X-10) Weather Guide for the CFFDRS More current and historical CFFDRS documentation can be found on the NRCan Open S&T Repository (OSTR) .","title":"Reports"},{"location":"resources/#maps","text":"Canadian Wildland Fire Information System (CWFIS) Canadian Interagency Forest Fire Centre (CIFFC) National Forest Information System (NFIS) Forest Atlas Global Wildfire Information System (GWIS)","title":"Maps"},{"location":"resources/#overview","text":"Forest fires Fire management Canadian Forest Fire Danger Rating System (CFFDRS) Government of Canada Natural Resources Canada Link Hubs Wildland fires Wildfires","title":"Overview"},{"location":"tutorials/","text":"Fran\u00e7ais Tutorials Hourly FWI This tutorial is a simple example of how to produce hourly Fire Weather Index (FWI) moisture codes and fire behaviour indices. A sample hourly weather dataset is provided that is complete and sequential with all the required variables. You can follow along with the steps on this website in a corresponding terminal, or download and run the tutorial script provided. Select a programming language to begin: HOURLY FWI Tutorial C (under development) \u2003 HOURLY FWI Tutorial Python \u2003 HOURLY FWI Tutorial R Upcoming Tutorials How to convert daily minimum and maximum weather data into hourly data using make_hourly() Basic plotting of FWI codes and indices","title":"Tutorials"},{"location":"tutorials/#tutorials","text":"","title":"Tutorials"},{"location":"tutorials/#hourly-fwi","text":"This tutorial is a simple example of how to produce hourly Fire Weather Index (FWI) moisture codes and fire behaviour indices. A sample hourly weather dataset is provided that is complete and sequential with all the required variables. You can follow along with the steps on this website in a corresponding terminal, or download and run the tutorial script provided. Select a programming language to begin: HOURLY FWI Tutorial C (under development) \u2003 HOURLY FWI Tutorial Python \u2003 HOURLY FWI Tutorial R","title":"Hourly FWI"},{"location":"tutorials/#upcoming-tutorials","text":"How to convert daily minimum and maximum weather data into hourly data using make_hourly() Basic plotting of FWI codes and indices","title":"Upcoming Tutorials"},{"location":"code/FWI2025_Python/","text":"back to Code Fran\u00e7ais FWI2025 - Python Last updated: September 10th, 2025 Scripts There are three scripts on the cffdrs-ng GitHub repository that are required to generate FWI2025 outputs: NG_FWI.py holds the functions and equations for generating FWI2025 outputs. util.py includes basic functions that are not part of FWI2025 equations, but generate intermediate information for the calculation of the FWI2025 components (e.g. time of sunrise and sunset, number of sunlight hours). daily_summaries.py holds the functions to generate the daily summary report. Packages The FWI2025 Python scripts require the following packages which must be installed prior to running NG_FWI.py . datetime (built-in) logging (built-in) argparse (built-in) math (built-in) numpy pandas Get Started The GitHub repository also includes a tutorial script and test data. See the Tutorials#Hourly FWI for a step-by-step workflow with hourly data. The documentation below goes into details about specific functions and data requirements. Data Format FWI2025 code is written for and tested using input data in the form of a table/array, commonly imported as comma-separated value (.csv) files. Each row then corresponds with a single timestep (i.e. hour), in sequential order. Outputs are then also of the same table/array form, with additional columns. In Python, we use the pandas package and its DataFrame data type to perform calculations. Users can configure the input file type before and output file type after calculation to fit individual data streams. Hourly FWI The hFWI() function (case sensitive) in the NG_FWI.py file calculates hourly FWI moisture codes and fire behaviour indices. It can handle multiple stations (locations) and multiple years of hourly input data all at once, or just a single hour. Input DataFrame The FWI system was originally designed to be calculated using data recorded at local weather stations, but any collected or calculated data (e.g. gridded data, forecast data, etc.) that includes the required weather variables can be used. See the CFFDRS Weather Guide for a description of weather data standards for the FWI System. The table below describes the columns and data types for the input DataFrame. Columns are required unless otherwise specified, in which case they will be set or calculated. The column names can be lower-case or upper-case, output columns are lower-case. Column Description Units Class id Unique identifier for weather station or location str lat Latitude DD float long Longitude DD float timezone UTC offset float yr Year of data point int mon Month of the year (1-12) int day Day of the month (1-31) int hr Hour of the day (0-23) int temp Air temperature \u00b0C float rh Relative humidity (0-100) % float ws 10 m open wind speed km/hr float prec Hourly precipitation mm float grass_fuel_load Density of grassland fuels (default 0.35) kg/m^2 float percent_cured Fraction of grassland fuels that is cured (0-100, optional) % float solrad Solar radiation \ud83d\udce5 (optional) kW/m^2 float In addition to the weather variables, you can specify start-up values for moisture codes and other parameters in hFWI() . Parameters The only required parameter for hFWI() is the input DataFrame, although many start-up values can be altered from default if desired. If you are performing a \"live\" run which is a continuation from previous FWI outputs with new data, the prior outputs need to be specified. hFWI(df_wx, ffmc_old = 85, mcffmc_old = None, dmc_old = 6, dc_old = 15, mcgfmc_matted_old = 16.31, mcgfmc_standing_old = 16.31, prec_cumulative = 0.0, canopy_drying = 0.0, silent = False, round_out = 4) Parameter Description df_wx DataFrame of hourly weather stream (see Input DataFrame section above) ffmc_old Previous value for FFMC (default 85). Set to None if mcffmc_old is specified instead mcffmc_old Previous value for mcffmc (default None ) dmc_old Previous value for DMC (default 6) dc_old Previous value for DC (default 15) mcgfmc_matted_old Previous value for mcgfmc_matted (default 16.31) mcgfmc_standing_old Previous value for mcgfmc_standing (default 16.31) prec_cumulative Cumulative precipitation this rainfall (default 0) canopy_drying Consecutive hours of no rain (default 0). 5 hours or more set to 0 silent Suppress informative print statements (default False) round_out Decimal places to truncate output values to (default 4). Set to None for no rounding Output The result of hFWI() is a copy of the input DataFrame, with output columns added, described below. This means all columns from the input, even ones that are unused, are still preserved in the output. Column Description grass_fuel_load Density of grassland fuels (if not provided) percent_cured Fraction of grassland fuels that is cured (if not provided) solrad Solar radiation (if not provided) sunrise Hour of sunrise sunset Hour of sunset sunlight_hours Number of hours between sunrise and sunset mcffmc Fine fuel moisture content ffmc Fine Fuel Moisture Code dmc Duff Moisture Code dc Drought Code isi Initial Spread Index bui Buildup Index fwi Fire Weather Index dsr Daily Severity Rating mcgfmc_matted Matted grassland fuel moisture content mcgfmc_standing Standing grassland fuel moisture content gfmc Grassland Fuel Moisture Code gsi Grassland Spread Index gfwi Grassland Fire Weather Index prec_cumulative Cumulative precipitation this rainfall canopy_drying Consecutive hours of no rain. 5 hours or more set to 0 Daily Summaries Hourly FWI components can be summarized in a variety of ways depending on usage and requirements. One way is to create a daily report, the method of which can be found in the daily_summaries.py script. generate_daily_summaries() boils down the hourly data into daily metrics, which means every row in the output now represents a day. To align more accurately with the typical daily fire behaviour cycle, the \"reset hour\" for a day can be redefined away from midnight (see reset_hr parameter below). By default, we use 05:00 (12 hours opposite 17:00), which means the 24 hours summarized are between 05:00 of the listed day and 04:00 of the next day (instead of 00:00 to 23:00). The first or last days are left out if they are represented by 12 or fewer hours of data. Parameters generate_daily_summaries(hourly_FWI, reset_hr = 5, silent = False, round_out = 4) Parameter Description hourly_FWI DataFrame produced by hFWI() (see Hourly FWI section above) reset_hr The boundary between days, instead of midnight (default 5) silent Suppress informative print statements (default False) round_out Decimal places to truncate output values to (default 4). Set to None for no rounding Output Parameter Description id Unique identifier for weather station or location yr Year mon Month of year day Day of month sunrise Hour of sunrise sunset Hour of sunset peak_hr Expected hour of daily maximum fire behaviour. Set as the hour of maximum ISI calculated using a smoothed wind speed (see ws_smooth ), or 17:00 if daily maximum FFMC is less than 85 duration Expected number of hours in the daily burning window. Calculated as the number of hours (possibly discontinuous) where isi_smooth is greater than 5 ffmc Fine Fuel Moisture Code at peak_hr dmc Duff Moisture Code at peak_hr dc Drought Code at peak_hr isi Initial Spread Index at peak_hr bui Buildup Index at peak_hr fwi Fire Weather Index at peak_hr dsr Daily Severity Rating at peak_hr gfmc Grassland Fuel Moisture Code at peak_hr gsi Grassland Spread Index at peak_hr gfwi Grassland Fire Weather Index at peak_hr ws_smooth Smoothed 10 m open wind speed at peak_hr . Smoothing calculated as every 24 hours being passed through a [1,4,6,4,1] binomial filter isi_smooth ISI calculated using a smoothed wind speed at peak_hr gsi_smooth GSI calculated using a smoothed wind speed at peak_hr","title":"FWI2025 Python"},{"location":"code/FWI2025_Python/#fwi2025-python","text":"Last updated: September 10th, 2025","title":"FWI2025 - Python"},{"location":"code/FWI2025_Python/#scripts","text":"There are three scripts on the cffdrs-ng GitHub repository that are required to generate FWI2025 outputs: NG_FWI.py holds the functions and equations for generating FWI2025 outputs. util.py includes basic functions that are not part of FWI2025 equations, but generate intermediate information for the calculation of the FWI2025 components (e.g. time of sunrise and sunset, number of sunlight hours). daily_summaries.py holds the functions to generate the daily summary report.","title":"Scripts"},{"location":"code/FWI2025_Python/#packages","text":"The FWI2025 Python scripts require the following packages which must be installed prior to running NG_FWI.py . datetime (built-in) logging (built-in) argparse (built-in) math (built-in) numpy pandas","title":"Packages"},{"location":"code/FWI2025_Python/#get-started","text":"The GitHub repository also includes a tutorial script and test data. See the Tutorials#Hourly FWI for a step-by-step workflow with hourly data. The documentation below goes into details about specific functions and data requirements.","title":"Get Started"},{"location":"code/FWI2025_Python/#data-format","text":"FWI2025 code is written for and tested using input data in the form of a table/array, commonly imported as comma-separated value (.csv) files. Each row then corresponds with a single timestep (i.e. hour), in sequential order. Outputs are then also of the same table/array form, with additional columns. In Python, we use the pandas package and its DataFrame data type to perform calculations. Users can configure the input file type before and output file type after calculation to fit individual data streams.","title":"Data Format"},{"location":"code/FWI2025_Python/#hourly-fwi","text":"The hFWI() function (case sensitive) in the NG_FWI.py file calculates hourly FWI moisture codes and fire behaviour indices. It can handle multiple stations (locations) and multiple years of hourly input data all at once, or just a single hour.","title":"Hourly FWI"},{"location":"code/FWI2025_Python/#input-dataframe","text":"The FWI system was originally designed to be calculated using data recorded at local weather stations, but any collected or calculated data (e.g. gridded data, forecast data, etc.) that includes the required weather variables can be used. See the CFFDRS Weather Guide for a description of weather data standards for the FWI System. The table below describes the columns and data types for the input DataFrame. Columns are required unless otherwise specified, in which case they will be set or calculated. The column names can be lower-case or upper-case, output columns are lower-case. Column Description Units Class id Unique identifier for weather station or location str lat Latitude DD float long Longitude DD float timezone UTC offset float yr Year of data point int mon Month of the year (1-12) int day Day of the month (1-31) int hr Hour of the day (0-23) int temp Air temperature \u00b0C float rh Relative humidity (0-100) % float ws 10 m open wind speed km/hr float prec Hourly precipitation mm float grass_fuel_load Density of grassland fuels (default 0.35) kg/m^2 float percent_cured Fraction of grassland fuels that is cured (0-100, optional) % float solrad Solar radiation \ud83d\udce5 (optional) kW/m^2 float In addition to the weather variables, you can specify start-up values for moisture codes and other parameters in hFWI() .","title":"Input DataFrame"},{"location":"code/FWI2025_Python/#parameters","text":"The only required parameter for hFWI() is the input DataFrame, although many start-up values can be altered from default if desired. If you are performing a \"live\" run which is a continuation from previous FWI outputs with new data, the prior outputs need to be specified. hFWI(df_wx, ffmc_old = 85, mcffmc_old = None, dmc_old = 6, dc_old = 15, mcgfmc_matted_old = 16.31, mcgfmc_standing_old = 16.31, prec_cumulative = 0.0, canopy_drying = 0.0, silent = False, round_out = 4) Parameter Description df_wx DataFrame of hourly weather stream (see Input DataFrame section above) ffmc_old Previous value for FFMC (default 85). Set to None if mcffmc_old is specified instead mcffmc_old Previous value for mcffmc (default None ) dmc_old Previous value for DMC (default 6) dc_old Previous value for DC (default 15) mcgfmc_matted_old Previous value for mcgfmc_matted (default 16.31) mcgfmc_standing_old Previous value for mcgfmc_standing (default 16.31) prec_cumulative Cumulative precipitation this rainfall (default 0) canopy_drying Consecutive hours of no rain (default 0). 5 hours or more set to 0 silent Suppress informative print statements (default False) round_out Decimal places to truncate output values to (default 4). Set to None for no rounding","title":"Parameters"},{"location":"code/FWI2025_Python/#output","text":"The result of hFWI() is a copy of the input DataFrame, with output columns added, described below. This means all columns from the input, even ones that are unused, are still preserved in the output. Column Description grass_fuel_load Density of grassland fuels (if not provided) percent_cured Fraction of grassland fuels that is cured (if not provided) solrad Solar radiation (if not provided) sunrise Hour of sunrise sunset Hour of sunset sunlight_hours Number of hours between sunrise and sunset mcffmc Fine fuel moisture content ffmc Fine Fuel Moisture Code dmc Duff Moisture Code dc Drought Code isi Initial Spread Index bui Buildup Index fwi Fire Weather Index dsr Daily Severity Rating mcgfmc_matted Matted grassland fuel moisture content mcgfmc_standing Standing grassland fuel moisture content gfmc Grassland Fuel Moisture Code gsi Grassland Spread Index gfwi Grassland Fire Weather Index prec_cumulative Cumulative precipitation this rainfall canopy_drying Consecutive hours of no rain. 5 hours or more set to 0","title":"Output"},{"location":"code/FWI2025_Python/#daily-summaries","text":"Hourly FWI components can be summarized in a variety of ways depending on usage and requirements. One way is to create a daily report, the method of which can be found in the daily_summaries.py script. generate_daily_summaries() boils down the hourly data into daily metrics, which means every row in the output now represents a day. To align more accurately with the typical daily fire behaviour cycle, the \"reset hour\" for a day can be redefined away from midnight (see reset_hr parameter below). By default, we use 05:00 (12 hours opposite 17:00), which means the 24 hours summarized are between 05:00 of the listed day and 04:00 of the next day (instead of 00:00 to 23:00). The first or last days are left out if they are represented by 12 or fewer hours of data.","title":"Daily Summaries"},{"location":"code/FWI2025_Python/#parameters_1","text":"generate_daily_summaries(hourly_FWI, reset_hr = 5, silent = False, round_out = 4) Parameter Description hourly_FWI DataFrame produced by hFWI() (see Hourly FWI section above) reset_hr The boundary between days, instead of midnight (default 5) silent Suppress informative print statements (default False) round_out Decimal places to truncate output values to (default 4). Set to None for no rounding","title":"Parameters"},{"location":"code/FWI2025_Python/#output_1","text":"Parameter Description id Unique identifier for weather station or location yr Year mon Month of year day Day of month sunrise Hour of sunrise sunset Hour of sunset peak_hr Expected hour of daily maximum fire behaviour. Set as the hour of maximum ISI calculated using a smoothed wind speed (see ws_smooth ), or 17:00 if daily maximum FFMC is less than 85 duration Expected number of hours in the daily burning window. Calculated as the number of hours (possibly discontinuous) where isi_smooth is greater than 5 ffmc Fine Fuel Moisture Code at peak_hr dmc Duff Moisture Code at peak_hr dc Drought Code at peak_hr isi Initial Spread Index at peak_hr bui Buildup Index at peak_hr fwi Fire Weather Index at peak_hr dsr Daily Severity Rating at peak_hr gfmc Grassland Fuel Moisture Code at peak_hr gsi Grassland Spread Index at peak_hr gfwi Grassland Fire Weather Index at peak_hr ws_smooth Smoothed 10 m open wind speed at peak_hr . Smoothing calculated as every 24 hours being passed through a [1,4,6,4,1] binomial filter isi_smooth ISI calculated using a smoothed wind speed at peak_hr gsi_smooth GSI calculated using a smoothed wind speed at peak_hr","title":"Output"},{"location":"code/FWI2025_R/","text":"back to Code Fran\u00e7ais FWI2025 - R Last updated: September 10th, 2025 Scripts There are three scripts on the cffdrs-ng GitHub repository that are required to generate FWI2025 outputs: NG_FWI.r holds the functions and equations for generating FWI2025 outputs. util.r includes basic functions that are not part of FWI2025 equations, but generate intermediate information for the calculation of the FWI2025 components (e.g. time of sunrise and sunset, number of sunlight hours). daily_summaries.r holds the functions to generate the daily summary output. Packages The FWI2025 R scripts require the following packages which must be installed prior to running NG_FWI.r . lubridate data.table Get Started The GitHub repository also includes a tutorial script and test data. See the Tutorials#Hourly FWI for a step-by-step workflow with hourly data. The documentation below goes into details about specific functions and data requirements. Data Format FWI2025 code is written for and tested using input data in the form of a table/array, commonly imported as comma-separated value (.csv) files. Each row then corresponds with a single timestep (i.e. hour), in sequential order. Outputs are then also of the same table/array form, with additional columns. In R, we use the data.table package and its data.table class to perform calculations. We accept input data in either data.table or the native data.frame class. The output will have the same class as the input. Users can configure the input file type before and output file type after calculation to fit individual data streams. Hourly FWI The hFWI() function (case sensitive) in the NG_FWI.r file calculates hourly FWI moisture codes and fire behaviour indices. It can handle multiple stations (locations) and multiple years of hourly input data all at once, or just a single hour. Input Data The FWI system was originally designed to be calculated using data recorded at local weather stations, but any collected or calculated data (e.g. gridded data, forecast data, etc.) that includes the required weather variables can be used. See the CFFDRS Weather Guide for a description of weather data standards for the FWI System. The table below describes the columns and data types for the input data.table or data.frame. Columns are required unless otherwise specified, in which case they will be set or calculated. The column names can be lower-case or upper-case, output columns are lower-case. Column Description Units Class id Unique identifier for weather station or location character lat Latitude DD numeric long Longitude DD numeric timezone UTC offset numeric yr Year of data point integer mon Month of the year (1-12) integer day Day of the month (1-31) integer hr Hour of the day (0-23) integer temp Air temperature \u00b0C numeric rh Relative humidity (0-100) % numeric ws 10 m open wind speed km/hr numeric prec Hourly precipitation mm numeric grass_fuel_load Density of grassland fuels (default 0.35) kg/m^2 numeric percent_cured Fraction of grassland fuels that is cured (0-100, optional) % numeric solrad Solar radiation \ud83d\udce5 (optional) kW/m^2 numeric In addition to the weather variables, you can specify start-up values for moisture codes and other parameters in hFWI() . Parameters The only required parameter for hFWI() is the input data.table or data.frame, although many start-up values can be altered from default if desired. If you are performing a \"live\" run which is a continuation from previous FWI outputs with new data, the prior outputs need to be specified. hFWI(df_wx, ffmc_old = 85, mcffmc_old = NA, dmc_old = 6, dc_old = 15, mcgfmc_matted_old = 16.31, mcgfmc_standing_old = 16.31, prec_cumulative = 0.0, canopy_drying = 0.0, silent = FALSE, round_out = 4) Parameter Description df_wx data.table or data.frame with hourly weather stream (see Input Data section above) ffmc_old Previous value for FFMC (default 85). Set to NA if mcffmc_old is specified instead mcffmc_old Previous value for mcffmc (default NA ) dmc_old Previous value for DMC (default 6) dc_old Previous value for DC (default 15) mcgfmc_matted_old Previous value for mcgfmc_matted (default 16.31) mcgfmc_standing_old Previous value for mcgfmc_standing (default 16.31) prec_cumulative Cumulative precipitation this rainfall (default 0) canopy_drying Consecutive hours of no rain (default 0). 5 hours or more set to 0 silent Suppress informative print statements (default FALSE) round_out Decimal places to truncate output values to (default 4). Set to NA for no rounding Output The result of hFWI() is a copy of the input data.table or data.frame (of the same class), with output columns added, described below. This means all columns from the input, even ones that are unused, are still preserved in the output. Column Description grass_fuel_load Density of grassland fuels (if not provided) percent_cured Fraction of grassland fuels that is cured (if not provided) solrad Solar radiation (if not provided) sunrise Hour of sunrise sunset Hour of sunset sunlight_hours Number of hours between sunrise and sunset mcffmc Fine fuel moisture content ffmc Fine Fuel Moisture Code dmc Duff Moisture Code dc Drought Code isi Initial Spread Index bui Buildup Index fwi Fire Weather Index dsr Daily Severity Rating mcgfmc_matted Matted grassland fuel moisture content mcgfmc_standing Standing grassland fuel moisture content gfmc Grassland Fuel Moisture Code gsi Grassland Spread Index gfwi Grassland Fire Weather Index prec_cumulative Cumulative precipitation this rainfall canopy_drying Consecutive hours of no rain. 5 hours or more set to 0 Daily Summaries Hourly FWI components can be summarized in a variety of ways depending on usage and requirements. One way is to create a daily report, the method of which can be found in the daily_summaries.r script. generate_daily_summaries() boils down the hourly data into daily metrics, which means every row in the output now represents a day. To align more accurately with the typical daily fire behaviour cycle, the \"reset hour\" for a day can be redefined away from midnight (see reset_hr parameter below). By default, we use 05:00 (12 hours opposite 17:00), which means the 24 hours summarized are between 05:00 of the listed day and 04:00 of the next day (instead of 00:00 to 23:00). The first or last days are left out if they are represented by 12 or fewer hours of data. Parameters generate_daily_summaries(hourly_FWI, reset_hr = 5, silent = FALSE, round_out = 4) Parameter Description hourly_FWI data.table or data.frame produced by hFWI() (see Hourly FWI section above) reset_hr The boundary between days, instead of midnight (default 5) silent Suppress informative print statements (default FALSE) round_out Decimal places to truncate output values to (default 4). Set to NA for no rounding Output Parameter Description id Unique identifier for weather station or location yr Year mon Month of year day Day of month sunrise Hour of sunrise sunset Hour of sunset peak_hr Expected hour of daily maximum fire behaviour. Set as the hour of maximum ISI calculated using a smoothed wind speed (see ws_smooth ), or 17:00 if daily maximum FFMC is less than 85 duration Expected number of hours in the daily burning window. Calculated as the number of hours (possibly discontinuous) where isi_smooth is greater than 5 ffmc Fine Fuel Moisture Code at peak_hr dmc Duff Moisture Code at peak_hr dc Drought Code at peak_hr isi Initial Spread Index at peak_hr bui Buildup Index at peak_hr fwi Fire Weather Index at peak_hr dsr Daily Severity Rating at peak_hr gfmc Grassland Fuel Moisture Code at peak_hr gsi Grassland Spread Index at peak_hr gfwi Grassland Fire Weather Index at peak_hr ws_smooth Smoothed 10 m open wind speed at peak_hr . Smoothing calculated as every 24 hours being passed through a [1,4,6,4,1] binomial filter isi_smooth ISI calculated using a smoothed wind speed at peak_hr gsi_smooth GSI calculated using a smoothed wind speed at peak_hr","title":"FWI2025 R"},{"location":"code/FWI2025_R/#fwi2025-r","text":"Last updated: September 10th, 2025","title":"FWI2025 - R"},{"location":"code/FWI2025_R/#scripts","text":"There are three scripts on the cffdrs-ng GitHub repository that are required to generate FWI2025 outputs: NG_FWI.r holds the functions and equations for generating FWI2025 outputs. util.r includes basic functions that are not part of FWI2025 equations, but generate intermediate information for the calculation of the FWI2025 components (e.g. time of sunrise and sunset, number of sunlight hours). daily_summaries.r holds the functions to generate the daily summary output.","title":"Scripts"},{"location":"code/FWI2025_R/#packages","text":"The FWI2025 R scripts require the following packages which must be installed prior to running NG_FWI.r . lubridate data.table","title":"Packages"},{"location":"code/FWI2025_R/#get-started","text":"The GitHub repository also includes a tutorial script and test data. See the Tutorials#Hourly FWI for a step-by-step workflow with hourly data. The documentation below goes into details about specific functions and data requirements.","title":"Get Started"},{"location":"code/FWI2025_R/#data-format","text":"FWI2025 code is written for and tested using input data in the form of a table/array, commonly imported as comma-separated value (.csv) files. Each row then corresponds with a single timestep (i.e. hour), in sequential order. Outputs are then also of the same table/array form, with additional columns. In R, we use the data.table package and its data.table class to perform calculations. We accept input data in either data.table or the native data.frame class. The output will have the same class as the input. Users can configure the input file type before and output file type after calculation to fit individual data streams.","title":"Data Format"},{"location":"code/FWI2025_R/#hourly-fwi","text":"The hFWI() function (case sensitive) in the NG_FWI.r file calculates hourly FWI moisture codes and fire behaviour indices. It can handle multiple stations (locations) and multiple years of hourly input data all at once, or just a single hour.","title":"Hourly FWI"},{"location":"code/FWI2025_R/#input-data","text":"The FWI system was originally designed to be calculated using data recorded at local weather stations, but any collected or calculated data (e.g. gridded data, forecast data, etc.) that includes the required weather variables can be used. See the CFFDRS Weather Guide for a description of weather data standards for the FWI System. The table below describes the columns and data types for the input data.table or data.frame. Columns are required unless otherwise specified, in which case they will be set or calculated. The column names can be lower-case or upper-case, output columns are lower-case. Column Description Units Class id Unique identifier for weather station or location character lat Latitude DD numeric long Longitude DD numeric timezone UTC offset numeric yr Year of data point integer mon Month of the year (1-12) integer day Day of the month (1-31) integer hr Hour of the day (0-23) integer temp Air temperature \u00b0C numeric rh Relative humidity (0-100) % numeric ws 10 m open wind speed km/hr numeric prec Hourly precipitation mm numeric grass_fuel_load Density of grassland fuels (default 0.35) kg/m^2 numeric percent_cured Fraction of grassland fuels that is cured (0-100, optional) % numeric solrad Solar radiation \ud83d\udce5 (optional) kW/m^2 numeric In addition to the weather variables, you can specify start-up values for moisture codes and other parameters in hFWI() .","title":"Input Data"},{"location":"code/FWI2025_R/#parameters","text":"The only required parameter for hFWI() is the input data.table or data.frame, although many start-up values can be altered from default if desired. If you are performing a \"live\" run which is a continuation from previous FWI outputs with new data, the prior outputs need to be specified. hFWI(df_wx, ffmc_old = 85, mcffmc_old = NA, dmc_old = 6, dc_old = 15, mcgfmc_matted_old = 16.31, mcgfmc_standing_old = 16.31, prec_cumulative = 0.0, canopy_drying = 0.0, silent = FALSE, round_out = 4) Parameter Description df_wx data.table or data.frame with hourly weather stream (see Input Data section above) ffmc_old Previous value for FFMC (default 85). Set to NA if mcffmc_old is specified instead mcffmc_old Previous value for mcffmc (default NA ) dmc_old Previous value for DMC (default 6) dc_old Previous value for DC (default 15) mcgfmc_matted_old Previous value for mcgfmc_matted (default 16.31) mcgfmc_standing_old Previous value for mcgfmc_standing (default 16.31) prec_cumulative Cumulative precipitation this rainfall (default 0) canopy_drying Consecutive hours of no rain (default 0). 5 hours or more set to 0 silent Suppress informative print statements (default FALSE) round_out Decimal places to truncate output values to (default 4). Set to NA for no rounding","title":"Parameters"},{"location":"code/FWI2025_R/#output","text":"The result of hFWI() is a copy of the input data.table or data.frame (of the same class), with output columns added, described below. This means all columns from the input, even ones that are unused, are still preserved in the output. Column Description grass_fuel_load Density of grassland fuels (if not provided) percent_cured Fraction of grassland fuels that is cured (if not provided) solrad Solar radiation (if not provided) sunrise Hour of sunrise sunset Hour of sunset sunlight_hours Number of hours between sunrise and sunset mcffmc Fine fuel moisture content ffmc Fine Fuel Moisture Code dmc Duff Moisture Code dc Drought Code isi Initial Spread Index bui Buildup Index fwi Fire Weather Index dsr Daily Severity Rating mcgfmc_matted Matted grassland fuel moisture content mcgfmc_standing Standing grassland fuel moisture content gfmc Grassland Fuel Moisture Code gsi Grassland Spread Index gfwi Grassland Fire Weather Index prec_cumulative Cumulative precipitation this rainfall canopy_drying Consecutive hours of no rain. 5 hours or more set to 0","title":"Output"},{"location":"code/FWI2025_R/#daily-summaries","text":"Hourly FWI components can be summarized in a variety of ways depending on usage and requirements. One way is to create a daily report, the method of which can be found in the daily_summaries.r script. generate_daily_summaries() boils down the hourly data into daily metrics, which means every row in the output now represents a day. To align more accurately with the typical daily fire behaviour cycle, the \"reset hour\" for a day can be redefined away from midnight (see reset_hr parameter below). By default, we use 05:00 (12 hours opposite 17:00), which means the 24 hours summarized are between 05:00 of the listed day and 04:00 of the next day (instead of 00:00 to 23:00). The first or last days are left out if they are represented by 12 or fewer hours of data.","title":"Daily Summaries"},{"location":"code/FWI2025_R/#parameters_1","text":"generate_daily_summaries(hourly_FWI, reset_hr = 5, silent = FALSE, round_out = 4) Parameter Description hourly_FWI data.table or data.frame produced by hFWI() (see Hourly FWI section above) reset_hr The boundary between days, instead of midnight (default 5) silent Suppress informative print statements (default FALSE) round_out Decimal places to truncate output values to (default 4). Set to NA for no rounding","title":"Parameters"},{"location":"code/FWI2025_R/#output_1","text":"Parameter Description id Unique identifier for weather station or location yr Year mon Month of year day Day of month sunrise Hour of sunrise sunset Hour of sunset peak_hr Expected hour of daily maximum fire behaviour. Set as the hour of maximum ISI calculated using a smoothed wind speed (see ws_smooth ), or 17:00 if daily maximum FFMC is less than 85 duration Expected number of hours in the daily burning window. Calculated as the number of hours (possibly discontinuous) where isi_smooth is greater than 5 ffmc Fine Fuel Moisture Code at peak_hr dmc Duff Moisture Code at peak_hr dc Drought Code at peak_hr isi Initial Spread Index at peak_hr bui Buildup Index at peak_hr fwi Fire Weather Index at peak_hr dsr Daily Severity Rating at peak_hr gfmc Grassland Fuel Moisture Code at peak_hr gsi Grassland Spread Index at peak_hr gfwi Grassland Fire Weather Index at peak_hr ws_smooth Smoothed 10 m open wind speed at peak_hr . Smoothing calculated as every 24 hours being passed through a [1,4,6,4,1] binomial filter isi_smooth ISI calculated using a smoothed wind speed at peak_hr gsi_smooth GSI calculated using a smoothed wind speed at peak_hr","title":"Output"},{"location":"contact/Anne_Cotton-Gagnon/","text":"back to Contact Fran\u00e7ais Anne Cotton-Gagnon Ing.f. Biol. M.Sc. (elle, elle | she, her) Forest Fire Research Officer Laurentian Forestry Centre anne.cotton-gagnon@nrcan-rncan.gc.ca ResearchGate Anne is a Forest Fire Research Officers with the Canadian Forest Service based out of the Laurentian Forestry Centre in Quebec city, Quebec. She contributes to the majority of Jonathan Boucher\u2019s team research projects, leading and/or supporting components such as field work preparation and realisation, statistical and spatial analyses, publication, presentation, and knowledge exchange with collaborators and partners. Her research interests include, but are not limited to, mitigation actions at the wildland urban interface, suppression effectiveness, and the use of experimental burns to better understand fire behavior. Her main motivation throughout her work remains the relationships built with the fire world actors, and the enriching conversations, exchanges and projects that result from them. Anne has done her undergraduate studies in biology, then a Master\u2019s degree in geographical sciences looking at the spruce budworm impact on balsam fir and black spruce regeneration, both at Laval University. After another year of studies in forestry and geomatics, she obtained her membership to the Ordre des Ing\u00e9nieurs Forestiers du Qu\u00e9bec (RPF for the province of Quebec). She had already been working as a student at the Laurentian Forestry Centre since her first undergraduate summer and switched to being a Forest Officer on forest soils, biomass and entomology in 2018. In 2021, she obtained her current position in wildfire research in Jonathan Boucher\u2019s team, which has kept her highly motivated ever since.","title":"Anne Cotton Gagnon"},{"location":"contact/Anne_Cotton-Gagnon/#anne-cotton-gagnon","text":"Ing.f. Biol. M.Sc. (elle, elle | she, her) Forest Fire Research Officer Laurentian Forestry Centre anne.cotton-gagnon@nrcan-rncan.gc.ca ResearchGate Anne is a Forest Fire Research Officers with the Canadian Forest Service based out of the Laurentian Forestry Centre in Quebec city, Quebec. She contributes to the majority of Jonathan Boucher\u2019s team research projects, leading and/or supporting components such as field work preparation and realisation, statistical and spatial analyses, publication, presentation, and knowledge exchange with collaborators and partners. Her research interests include, but are not limited to, mitigation actions at the wildland urban interface, suppression effectiveness, and the use of experimental burns to better understand fire behavior. Her main motivation throughout her work remains the relationships built with the fire world actors, and the enriching conversations, exchanges and projects that result from them. Anne has done her undergraduate studies in biology, then a Master\u2019s degree in geographical sciences looking at the spruce budworm impact on balsam fir and black spruce regeneration, both at Laval University. After another year of studies in forestry and geomatics, she obtained her membership to the Ordre des Ing\u00e9nieurs Forestiers du Qu\u00e9bec (RPF for the province of Quebec). She had already been working as a student at the Laurentian Forestry Centre since her first undergraduate summer and switched to being a Forest Officer on forest soils, biomass and entomology in 2018. In 2021, she obtained her current position in wildfire research in Jonathan Boucher\u2019s team, which has kept her highly motivated ever since.","title":"Anne Cotton-Gagnon"},{"location":"contact/Chelene_Hanes/","text":"back to Contact Fran\u00e7ais Chelene Hanes Wildland Fire Research Scientist Great Lakes Forestry Centre chelene.hanes@nrcan-rncan.gc.ca Firelab , ResearchGate , NRCan Dr Chelene Hanes is a prominent figure in wildland fire management, currently serving as a key expert at the Canadian Forest Service (CFS). With extensive experience in fire behavior research, fire weather, and drought impacts on wildfire activity, Chelene has made significant contributions to the understanding of how environmental factors influence fire regimes in Canada. Her work at the intersection of science and operational fire management has positioned her as a thought leader in promoting evidence-based practices for wildfire prevention and mitigation. Chelene's role at CFS includes advancing wildfire danger reduction strategies, collaborating with national and international partners, and contributing to major initiatives that address the increasing complexity of wildfire management in the context of climate change. Known for her strategic thinking and dedication to capacity building, she is deeply involved in efforts to develop tools and models within the Canadian Forest Fire Danger Rating System, the primary decision-making tool used by wildfire management Chelene lives in Sault Ste. Marie, Ontario with her husband and two daughters.","title":"Chelene Hanes"},{"location":"contact/Chelene_Hanes/#chelene-hanes","text":"Wildland Fire Research Scientist Great Lakes Forestry Centre chelene.hanes@nrcan-rncan.gc.ca Firelab , ResearchGate , NRCan Dr Chelene Hanes is a prominent figure in wildland fire management, currently serving as a key expert at the Canadian Forest Service (CFS). With extensive experience in fire behavior research, fire weather, and drought impacts on wildfire activity, Chelene has made significant contributions to the understanding of how environmental factors influence fire regimes in Canada. Her work at the intersection of science and operational fire management has positioned her as a thought leader in promoting evidence-based practices for wildfire prevention and mitigation. Chelene's role at CFS includes advancing wildfire danger reduction strategies, collaborating with national and international partners, and contributing to major initiatives that address the increasing complexity of wildfire management in the context of climate change. Known for her strategic thinking and dedication to capacity building, she is deeply involved in efforts to develop tools and models within the Canadian Forest Fire Danger Rating System, the primary decision-making tool used by wildfire management Chelene lives in Sault Ste. Marie, Ontario with her husband and two daughters.","title":"Chelene Hanes"},{"location":"contact/Gabrielle_Ayres/","text":"back to Contact Fran\u00e7ais Gabrielle Ayres (she, her | elle, elle) Research Mobilization Analyst Great Lakes Forestry Centre gabrielle.ayres@nrcan-rncan.gc.ca NRCan Gabrielle is a research mobilization analyst with the Canadian Forest Service based out of the Great Lakes Forestry Centre in Sault Ste. Marie, Ontario. She has been contributing to the FWI2025 System delivery since July 2024, supporting Natasha Jurko, by assisting with the national roll-out, identifying effective ways to engage with agencies to support their needs, and creating documentation to facilitate uptake and implementation. Prior to this role, Gabrielle served as an Outreach Advisor for the Northeast Region at the Ontario Aviation, Forest Fire and Emergency Services (AFFES) branch, bringing over a decade of experience in fire management. Gabrielle holds a master\u2019s in education from the University of Ottawa and is proficient in both French and English. Her areas of expertise include knowledge exchange, communications, project management, and the creation of plain language documentation.","title":"Gabrielle Ayres"},{"location":"contact/Gabrielle_Ayres/#gabrielle-ayres","text":"(she, her | elle, elle) Research Mobilization Analyst Great Lakes Forestry Centre gabrielle.ayres@nrcan-rncan.gc.ca NRCan Gabrielle is a research mobilization analyst with the Canadian Forest Service based out of the Great Lakes Forestry Centre in Sault Ste. Marie, Ontario. She has been contributing to the FWI2025 System delivery since July 2024, supporting Natasha Jurko, by assisting with the national roll-out, identifying effective ways to engage with agencies to support their needs, and creating documentation to facilitate uptake and implementation. Prior to this role, Gabrielle served as an Outreach Advisor for the Northeast Region at the Ontario Aviation, Forest Fire and Emergency Services (AFFES) branch, bringing over a decade of experience in fire management. Gabrielle holds a master\u2019s in education from the University of Ottawa and is proficient in both French and English. Her areas of expertise include knowledge exchange, communications, project management, and the creation of plain language documentation.","title":"Gabrielle Ayres"},{"location":"contact/Jonathan_Boucher/","text":"back to Contact Fran\u00e7ais Jonathan Boucher Ph.D (he, him | il, lui) Wildland Fire Research Scientist Laurentian Forestry Centre jonathan.boucher@nrcan-rncan.gc.ca ResearchGate Jonathan Boucher is a Wildland Fire Research Scientist with the Canadian Forest Service based out of the Laurentian Forestry Centre in Quebec city, Quebec. Jonathan develops scientific knowledge to support wildfire management and risk management activities. His research interests include fire behavior, fire risk, fuel attributes modelling, mitigation actions at the wildland urban interface, and suppression effectiveness. At the Canadian scale, he is a member of the scientific committee and operational committee of the Forest Mapping Program for Wildland Fire Resilience, and a member of the steering committee of the National Wildland Fire Risk Assessment Framework for Canada. In the fire danger group, he leads the fuels component of the next generation of the Canadian Forest Fire Danger Rating System. He also leads the Firehawk Project, a web platform that is a rapid risk assessor for wildfires in Canada. Some of the other projects he led or participated in are the development of FireLossRate, a framework and R package designed to estimate the proportion of lost structures associated with a wildfire event, wildland fire risk analysis for a military base, using optimization tools to identify optimal locations for the implementation of fuel treatment measures, and the Reference guide to the drop effectiveness of skimmer and rotary wing airtankers, among many others. Jonathan has done his undergraduate studies in forest management and environments (Laval University), his Master\u2019s degree in renewable resources on the impacts of post-fire salvage logging on beetles associated with wildfires in the boreal forest (UQAC), and his PhD in forestry science on characterizing fire severity as a management tool for post-fire management in the boreal forest (Laval University). He then worked from 2015 to 2019 at SOPFEU where he gained valuable knowledge on wildfire management and operations, before obtaining his current position at the CFS in 2019.","title":"Jonathan Boucher"},{"location":"contact/Jonathan_Boucher/#jonathan-boucher","text":"Ph.D (he, him | il, lui) Wildland Fire Research Scientist Laurentian Forestry Centre jonathan.boucher@nrcan-rncan.gc.ca ResearchGate Jonathan Boucher is a Wildland Fire Research Scientist with the Canadian Forest Service based out of the Laurentian Forestry Centre in Quebec city, Quebec. Jonathan develops scientific knowledge to support wildfire management and risk management activities. His research interests include fire behavior, fire risk, fuel attributes modelling, mitigation actions at the wildland urban interface, and suppression effectiveness. At the Canadian scale, he is a member of the scientific committee and operational committee of the Forest Mapping Program for Wildland Fire Resilience, and a member of the steering committee of the National Wildland Fire Risk Assessment Framework for Canada. In the fire danger group, he leads the fuels component of the next generation of the Canadian Forest Fire Danger Rating System. He also leads the Firehawk Project, a web platform that is a rapid risk assessor for wildfires in Canada. Some of the other projects he led or participated in are the development of FireLossRate, a framework and R package designed to estimate the proportion of lost structures associated with a wildfire event, wildland fire risk analysis for a military base, using optimization tools to identify optimal locations for the implementation of fuel treatment measures, and the Reference guide to the drop effectiveness of skimmer and rotary wing airtankers, among many others. Jonathan has done his undergraduate studies in forest management and environments (Laval University), his Master\u2019s degree in renewable resources on the impacts of post-fire salvage logging on beetles associated with wildfires in the boreal forest (UQAC), and his PhD in forestry science on characterizing fire severity as a management tool for post-fire management in the boreal forest (Laval University). He then worked from 2015 to 2019 at SOPFEU where he gained valuable knowledge on wildfire management and operations, before obtaining his current position at the CFS in 2019.","title":"Jonathan Boucher"},{"location":"contact/Kevin_Siu/","text":"back to Contact Fran\u00e7ais Kevin Siu (he, him | il, lui) Fire Analyst Programmer Great Lakes Forestry Centre kevin.siu@nrcan-rncan.gc.ca NRCan Kevin is a Fire Analyst Programmer with the Canadian Forest Service based out of the Great Lakes Forestry Centre in Sault Ste. Marie, Ontario. He is working on various aspects of the Next Generation Canadian Forest Fire Danger Rating System (NG-CFFDRS) rollout. He is focused on analysis of fire danger outputs, code documentation, and the development of this website. Kevin's academic background is in math and physics, which has allowed him to follow his curiosity into many different research fields. He has experience from his undergraduate degree working in a quantum computing physics lab, an icebreaker ship engineering team, and a glaciology research group. He is excited to learn more about forest fires and environmental science while helping improve the tools for wildland fire managers.","title":"Kevin Siu"},{"location":"contact/Kevin_Siu/#kevin-siu","text":"(he, him | il, lui) Fire Analyst Programmer Great Lakes Forestry Centre kevin.siu@nrcan-rncan.gc.ca NRCan Kevin is a Fire Analyst Programmer with the Canadian Forest Service based out of the Great Lakes Forestry Centre in Sault Ste. Marie, Ontario. He is working on various aspects of the Next Generation Canadian Forest Fire Danger Rating System (NG-CFFDRS) rollout. He is focused on analysis of fire danger outputs, code documentation, and the development of this website. Kevin's academic background is in math and physics, which has allowed him to follow his curiosity into many different research fields. He has experience from his undergraduate degree working in a quantum computing physics lab, an icebreaker ship engineering team, and a glaciology research group. He is excited to learn more about forest fires and environmental science while helping improve the tools for wildland fire managers.","title":"Kevin Siu"},{"location":"contact/Patrick_Deane/","text":"back to Contact Fran\u00e7ais Patrick Deane (he, him | il, lui) Forest Fire Research Specialist Great Lakes Forestry Centre patrick.deane@nrcan-rncan.gc.ca NRCan Patrick is a Forest Fire Research Specialist with the Canadian Forest Service based out of the Great Lakes Forestry Centre in Sault Ste. Marie, Ontario. Patrick works closely with Dr Chelene Hanes, supporting her research on fire behavior, fire weather, and drought impacts on wildfire activity. In addition to collaborating with fellow researchers, Patrick often works directly with operational fire management staff to implement research practices to aid in decision-making. Patrick is heavily involved in the collection of field data, including setup and maintenance of environmental stations, as well as data management and analysis that contribute towards tools and models within the Canadian Forest Fire Danger Rating System. Prior to starting with the Canadian Forest Service, Patrick attended McMaster University where his graduate research focused on ecohydrological approaches to fuel management in peatland ecosystems in the boreal region of Alberta. Patrick also spent two seasons as a wildland firefighter in Alberta. These experiences continue to provide important context and inform his research activities.","title":"Patrick Deane"},{"location":"contact/Patrick_Deane/#patrick-deane","text":"(he, him | il, lui) Forest Fire Research Specialist Great Lakes Forestry Centre patrick.deane@nrcan-rncan.gc.ca NRCan Patrick is a Forest Fire Research Specialist with the Canadian Forest Service based out of the Great Lakes Forestry Centre in Sault Ste. Marie, Ontario. Patrick works closely with Dr Chelene Hanes, supporting her research on fire behavior, fire weather, and drought impacts on wildfire activity. In addition to collaborating with fellow researchers, Patrick often works directly with operational fire management staff to implement research practices to aid in decision-making. Patrick is heavily involved in the collection of field data, including setup and maintenance of environmental stations, as well as data management and analysis that contribute towards tools and models within the Canadian Forest Fire Danger Rating System. Prior to starting with the Canadian Forest Service, Patrick attended McMaster University where his graduate research focused on ecohydrological approaches to fuel management in peatland ecosystems in the boreal region of Alberta. Patrick also spent two seasons as a wildland firefighter in Alberta. These experiences continue to provide important context and inform his research activities.","title":"Patrick Deane"},{"location":"tutorials/Hourly_FWI_Python/","text":"back to Tutorials Fran\u00e7ais Hourly FWI Tutorial - Python Last updated: September 10th, 2025 What you'll need The following files can be found on the cffdrs-ng GitHub repository : data/ PRF2007_hourly_wx.csv FWI/ Python/ tutorial/ tutorial_hourly_FWI.py NG_FWI.py util.py daily_summaries.py If you are unfamiliar with GitHub, there are many options for you to retrieve the code and data files: Download each file to your computer individually. On the file's GitHub page (e.g. PRF2007_hourly_wx.csv ), find the \"More file actions\" button at the top-right side of the website (denoted \"...\"), and select \"Download\". This will begin downloading based on your browser settings. Repeat this for every file. Download the whole repository to your computer. See the GitHub documentation for more information. Clone the whole repository to your computer with Git. See the GitHub documentation for more information. Fork the repository to create a new repository on GitHub. See the GitHub documentation for more information. Besides the files, ensure you have the required R packages, which are listed at FWI2025_Python#packages . Data PRF2007_hourly_wx.csv contains hourly weather recorded from a Petawawa Research Forest (PRF) weather station during the 2007 field season. The data has no gaps and is sorted sequentially by time, which is a requirement for FWI2025 input data. If you would like guidance on how to fill in missing weather data for your situation, check the CFFDRS Weather Guide or reach out to us ! The column headers are those required for hourly FWI calculations, details of which can be found at FWI2025_Python#input-dataframe . Grassland curing ( percent_cured ) and solar radiation ( solrad ) are not included, but these are optional inputs and they will be automatically calculated if not provided. Steps Open the tutorial_hourly_FWI.py code file. You can either follow the code and comments in the file or continue on this page (both include the same code and content). Load packages Run pip install to install any you are missing. import pandas as pd from datetime import datetime Load functions and data If the working directory is different from where you saved the FWI2025 scripts, you can add the path to the scripts with the sys package and sys.path.append() . from NG_FWI import hFWI from daily_summaries import generate_daily_summaries Load the input weather station data file. Specify the file path if PRF2007_hourly_wx.csv is not in the working directory. data = pd.read_csv(\"PRF2007_hourly_wx.csv\") Print the column names, data should contain 12 columns. >>> data.columns Index(['id', 'lat', 'long', 'timezone', 'yr', 'mon', 'day', 'hr', 'temp', 'rh', 'ws', 'prec'], dtype='object') Previously, the timezone (UTC offset) was a function parameter and calculated from latitude and longitude. Now it is a data frame column and provided. See the appendix of this tutorial for extra information on how to calculate the timezone, along with the extra information required about the dataset. Run FWI2025 hFWI() is the function that calculates hourly FWI codes in FWI2025. Details about it can be found at FWI2025 - Python#hourly-fwi . It can handle multiple stations and years/fire seasons (not shown in this tutorial). Default FWI start-up code values are: ffmc_old = 85, dmc_old = 6, dc_old = 15. data_fwi = hFWI(data) Output is a DataFrame, with FWI calculations appended after the input columns. Save the output as a .csv file (overrides any preexisting file). data_fwi.to_csv(\"PRF2007_hourly_FWI.csv\", index = False) Print the last two rows of the standard moisture codes and fire behaviour indices. >>> standard_components = ['ffmc', 'dmc', 'dc', 'isi', 'bui', 'fwi'] >>> data_fwi.loc[:, standard_components].tail(2) ffmc dmc dc isi bui fwi 2621 80.2669 3.0924 219.5169 1.6423 5.9745 0.7650 2622 82.1759 3.3503 220.0533 2.1462 6.4550 1.2023 Print a simple summary of the standard FWI components. data_fwi.loc[:, standard_components].describe() ffmc dmc dc isi bui fwi count 2623.000000 2623.000000 2623.000000 2623.000000 2623.000000 2623.000000 mean 70.622770 17.487231 136.122169 2.158163 23.971546 3.877128 std 22.973326 13.331302 76.454242 2.233486 17.499332 4.438263 min 0.000000 0.000000 15.409200 0.000000 0.000000 0.000000 25% 67.866500 5.924600 72.276400 0.787700 8.407750 0.422050 50% 79.377900 16.460900 133.062700 1.395800 22.623400 2.407500 75% 85.177050 26.511200 188.638500 2.978500 34.605350 5.929900 max 94.397300 50.174000 292.950100 17.595800 66.148100 25.135200 Calculate daily summaries Calculate outputs like peak burn time and number of hours of spread potential. Details about the daily summaries function can be found at FWI2025 - Python#Daily Summaries . report = generate_daily_summaries(data_fwi) Print a simple summary of the daily report. >>> daily_components = [\"peak_hr\", \"duration\", \"isi_smooth\", \"dsr\"] >>> report[daily_components].describe() peak_hr duration isi_smooth dsr count 109.000000 109.000000 109.000000 109.000000 mean 17.293578 2.697248 4.324269 1.553256 std 1.271502 3.818824 3.220367 1.762854 min 13.000000 0.000000 0.000000 0.000000 25% 17.000000 0.000000 1.234300 0.033800 50% 17.000000 0.000000 4.031900 0.991300 75% 18.000000 5.000000 6.495300 2.594000 max 23.000000 14.000000 15.770700 6.948600 View a distribution of the hour of daily peak burn, which looks like this: >>> report['peak_hr'].value_counts().sort_index() peak_time 13 1 14 2 15 4 16 10 17 53 18 23 19 14 20 1 23 1 Name: count, dtype: int64 From here, the outputs can be converted to any datatype for further analysis or plotted for visualization. Appendix: Timezones This section will cover how to calculate a timezone based on a location (latitude and longitude) and date. Note that this is not necessarily a substitute for actual information about the time used in a dataset. The CFFDRS Weather Guide specifies to collect data by local standard time, which is different in many places due to the shift to daylight time in summer months (daylight savings). The 'timezonefinder' and 'pytz' packages have functions to get the timezone of the weather station based on latitude and longitude. from timezonefinder import TimezoneFinder from pytz import timezone First, make a dataframe of stations with unique ID, latitude, and longitude. stations = data.loc[:, ['id', 'lat', 'long']].drop_duplicates() Print the unique station IDs and coordinates. For this dataset the only station is at Petawawa Research Forest (PRF). >>> stations id lat long 0 PRF 45.996 -77.427 Find the timezone based on latitude and longitude. tf = TimezoneFinder() tz_loc = tf.timezone_at(lat = stations.at[0, 'lat'], lng = stations.at[0, 'long']) Print timezone location. PRF is equivalent to \"America/Toronto\". >>> tz_loc 'America/Toronto' The UTC offset can then be determined from the timezone location. utc = timezone(tz_loc).localize(datetime(2007, 5, 10)).strftime('%z') Print UTC offset, PRF in May is in Eastern Daylight Time (EDT) >>> utc '-0400' The UTC offset is expected as integer hours, so we can set it to -4. utc = -4 Since May 10, 2007 is during daylight savings the UTC offset calculated above corresponds to Eastern Daylight Time (EDT), UTC-4. This matches the timezone column provided since this data was collected using EDT. For Eastern Standard Time (EST), the UTC offset would be UTC-5.","title":"Hourly FWI Python"},{"location":"tutorials/Hourly_FWI_Python/#hourly-fwi-tutorial-python","text":"Last updated: September 10th, 2025","title":"Hourly FWI Tutorial - Python"},{"location":"tutorials/Hourly_FWI_Python/#what-youll-need","text":"The following files can be found on the cffdrs-ng GitHub repository : data/ PRF2007_hourly_wx.csv FWI/ Python/ tutorial/ tutorial_hourly_FWI.py NG_FWI.py util.py daily_summaries.py If you are unfamiliar with GitHub, there are many options for you to retrieve the code and data files: Download each file to your computer individually. On the file's GitHub page (e.g. PRF2007_hourly_wx.csv ), find the \"More file actions\" button at the top-right side of the website (denoted \"...\"), and select \"Download\". This will begin downloading based on your browser settings. Repeat this for every file. Download the whole repository to your computer. See the GitHub documentation for more information. Clone the whole repository to your computer with Git. See the GitHub documentation for more information. Fork the repository to create a new repository on GitHub. See the GitHub documentation for more information. Besides the files, ensure you have the required R packages, which are listed at FWI2025_Python#packages .","title":"What you'll need"},{"location":"tutorials/Hourly_FWI_Python/#data","text":"PRF2007_hourly_wx.csv contains hourly weather recorded from a Petawawa Research Forest (PRF) weather station during the 2007 field season. The data has no gaps and is sorted sequentially by time, which is a requirement for FWI2025 input data. If you would like guidance on how to fill in missing weather data for your situation, check the CFFDRS Weather Guide or reach out to us ! The column headers are those required for hourly FWI calculations, details of which can be found at FWI2025_Python#input-dataframe . Grassland curing ( percent_cured ) and solar radiation ( solrad ) are not included, but these are optional inputs and they will be automatically calculated if not provided.","title":"Data"},{"location":"tutorials/Hourly_FWI_Python/#steps","text":"Open the tutorial_hourly_FWI.py code file. You can either follow the code and comments in the file or continue on this page (both include the same code and content).","title":"Steps"},{"location":"tutorials/Hourly_FWI_Python/#load-packages","text":"Run pip install to install any you are missing. import pandas as pd from datetime import datetime","title":"Load packages"},{"location":"tutorials/Hourly_FWI_Python/#load-functions-and-data","text":"If the working directory is different from where you saved the FWI2025 scripts, you can add the path to the scripts with the sys package and sys.path.append() . from NG_FWI import hFWI from daily_summaries import generate_daily_summaries Load the input weather station data file. Specify the file path if PRF2007_hourly_wx.csv is not in the working directory. data = pd.read_csv(\"PRF2007_hourly_wx.csv\") Print the column names, data should contain 12 columns. >>> data.columns Index(['id', 'lat', 'long', 'timezone', 'yr', 'mon', 'day', 'hr', 'temp', 'rh', 'ws', 'prec'], dtype='object') Previously, the timezone (UTC offset) was a function parameter and calculated from latitude and longitude. Now it is a data frame column and provided. See the appendix of this tutorial for extra information on how to calculate the timezone, along with the extra information required about the dataset.","title":"Load functions and data"},{"location":"tutorials/Hourly_FWI_Python/#run-fwi2025","text":"hFWI() is the function that calculates hourly FWI codes in FWI2025. Details about it can be found at FWI2025 - Python#hourly-fwi . It can handle multiple stations and years/fire seasons (not shown in this tutorial). Default FWI start-up code values are: ffmc_old = 85, dmc_old = 6, dc_old = 15. data_fwi = hFWI(data) Output is a DataFrame, with FWI calculations appended after the input columns. Save the output as a .csv file (overrides any preexisting file). data_fwi.to_csv(\"PRF2007_hourly_FWI.csv\", index = False) Print the last two rows of the standard moisture codes and fire behaviour indices. >>> standard_components = ['ffmc', 'dmc', 'dc', 'isi', 'bui', 'fwi'] >>> data_fwi.loc[:, standard_components].tail(2) ffmc dmc dc isi bui fwi 2621 80.2669 3.0924 219.5169 1.6423 5.9745 0.7650 2622 82.1759 3.3503 220.0533 2.1462 6.4550 1.2023 Print a simple summary of the standard FWI components. data_fwi.loc[:, standard_components].describe() ffmc dmc dc isi bui fwi count 2623.000000 2623.000000 2623.000000 2623.000000 2623.000000 2623.000000 mean 70.622770 17.487231 136.122169 2.158163 23.971546 3.877128 std 22.973326 13.331302 76.454242 2.233486 17.499332 4.438263 min 0.000000 0.000000 15.409200 0.000000 0.000000 0.000000 25% 67.866500 5.924600 72.276400 0.787700 8.407750 0.422050 50% 79.377900 16.460900 133.062700 1.395800 22.623400 2.407500 75% 85.177050 26.511200 188.638500 2.978500 34.605350 5.929900 max 94.397300 50.174000 292.950100 17.595800 66.148100 25.135200","title":"Run FWI2025"},{"location":"tutorials/Hourly_FWI_Python/#calculate-daily-summaries","text":"Calculate outputs like peak burn time and number of hours of spread potential. Details about the daily summaries function can be found at FWI2025 - Python#Daily Summaries . report = generate_daily_summaries(data_fwi) Print a simple summary of the daily report. >>> daily_components = [\"peak_hr\", \"duration\", \"isi_smooth\", \"dsr\"] >>> report[daily_components].describe() peak_hr duration isi_smooth dsr count 109.000000 109.000000 109.000000 109.000000 mean 17.293578 2.697248 4.324269 1.553256 std 1.271502 3.818824 3.220367 1.762854 min 13.000000 0.000000 0.000000 0.000000 25% 17.000000 0.000000 1.234300 0.033800 50% 17.000000 0.000000 4.031900 0.991300 75% 18.000000 5.000000 6.495300 2.594000 max 23.000000 14.000000 15.770700 6.948600 View a distribution of the hour of daily peak burn, which looks like this: >>> report['peak_hr'].value_counts().sort_index() peak_time 13 1 14 2 15 4 16 10 17 53 18 23 19 14 20 1 23 1 Name: count, dtype: int64 From here, the outputs can be converted to any datatype for further analysis or plotted for visualization.","title":"Calculate daily summaries"},{"location":"tutorials/Hourly_FWI_Python/#appendix-timezones","text":"This section will cover how to calculate a timezone based on a location (latitude and longitude) and date. Note that this is not necessarily a substitute for actual information about the time used in a dataset. The CFFDRS Weather Guide specifies to collect data by local standard time, which is different in many places due to the shift to daylight time in summer months (daylight savings). The 'timezonefinder' and 'pytz' packages have functions to get the timezone of the weather station based on latitude and longitude. from timezonefinder import TimezoneFinder from pytz import timezone First, make a dataframe of stations with unique ID, latitude, and longitude. stations = data.loc[:, ['id', 'lat', 'long']].drop_duplicates() Print the unique station IDs and coordinates. For this dataset the only station is at Petawawa Research Forest (PRF). >>> stations id lat long 0 PRF 45.996 -77.427 Find the timezone based on latitude and longitude. tf = TimezoneFinder() tz_loc = tf.timezone_at(lat = stations.at[0, 'lat'], lng = stations.at[0, 'long']) Print timezone location. PRF is equivalent to \"America/Toronto\". >>> tz_loc 'America/Toronto' The UTC offset can then be determined from the timezone location. utc = timezone(tz_loc).localize(datetime(2007, 5, 10)).strftime('%z') Print UTC offset, PRF in May is in Eastern Daylight Time (EDT) >>> utc '-0400' The UTC offset is expected as integer hours, so we can set it to -4. utc = -4 Since May 10, 2007 is during daylight savings the UTC offset calculated above corresponds to Eastern Daylight Time (EDT), UTC-4. This matches the timezone column provided since this data was collected using EDT. For Eastern Standard Time (EST), the UTC offset would be UTC-5.","title":"Appendix: Timezones"},{"location":"tutorials/Hourly_FWI_R/","text":"back to Tutorials Fran\u00e7ais Hourly FWI Tutorial - R Last updated: September 10th, 2025 What you'll need The following files can be found on the cffdrs-ng GitHub repository : data/ PRF2007_hourly_wx.csv FWI/ R/ tutorial/ tutorial_hourly_FWI.r NG_FWI.r util.r daily_summaries.r If you are unfamiliar with GitHub, there are many options for you to retrieve the code and data files: Download each file to your computer individually. On the file's GitHub page (e.g. PRF2007_hourly_wx.csv ), find the \"More file actions\" button at the top-right side of the website (denoted \"...\"), and select \"Download\". This will begin downloading based on your browser settings. Repeat this for every file. Download the whole repository to your computer. See the GitHub documentation for more information. Clone the whole repository to your computer with Git. See the GitHub documentation for more information. Fork the repository to create a new repository on GitHub. See the GitHub documentation for more information. Besides the files, ensure you have the required R packages, which are listed at FWI2025_R#packages . Data PRF2007_hourly_wx.csv contains hourly weather recorded from a Petawawa Research Forest (PRF) weather station during the 2007 field season. The data has no gaps and is sorted sequentially by time, which is a requirement for FWI2025 input data. If you would like guidance on how to fill in missing weather data for your situation, check the CFFDRS Weather Guide or reach out to us ! The column headers are those required for hourly FWI calculations, details of which can be found at FWI2025_R#input-data . Grassland curing ( percent_cured ) and solar radiation ( solrad ) are not included, but these are optional inputs and they will be automatically calculated if not provided. Steps Open the tutorial_hourly_FWI.r code file. You can either follow the code and comments in the file or continue on this page (both include the same code and content). Load libraries Run install.packages() to install any you are missing library(lubridate) library(data.table) Load functions and data Check your current working directory getwd() If the working directory is different from where you saved the FWI2025 scripts, change the working directory with setwd() to that folder. Load the files containing the functions and variables to calculate FWI2025. source(\"NG_FWI.r\") source(\"util.r\") source(\"daily_summaries.r\") Load the input weather station data file. Specify the file path if PRF2007_hourly_wx.csv is not in the working directory data <- read.csv(\"PRF2007_hourly_wx.csv\") Print the column names, data should contain 12 columns > names(data) [1] \"id\" \"lat\" \"long\" \"timezone\" \"yr\" \"mon\" [7] \"day\" \"hr\" \"temp\" \"rh\" \"ws\" \"prec\" Previously, the timezone (UTC offset) was a function parameter and calculated from latitude and longitude. Now it is a data frame column and provided. See the appendix of this tutorial for extra information on how to calculate the timezone, along with the extra information required about the dataset. Run FWI2025 hFWI() is the function that calculates hourly FWI codes in FWI2025. Details about it can be found at FWI2025 - R#hourly-fwi . It can handle multiple stations and years/fire seasons (not shown in this tutorial). Default FWI start-up code values are: ffmc_old = 85, dmc_old = 6, dc_old = 15. data_fwi <- hFWI(data) Output is a data.frame (matching input class), with FWI calculations appended after the input columns. Save the output as a .csv file (overrides any preexisting file). write.csv(data_fwi, \"PRF2007_hourly_FWI.csv\", row.names = FALSE) Print the last two rows of the standard moisture codes and fire behaviour indices. > standard_components <- c(\"ffmc\", \"dmc\", \"dc\", \"isi\", \"bui\", \"fwi\") > tail(data_fwi[standard_components], 2) ffmc dmc dc isi bui fwi 2622 80.2669 3.0924 219.5169 1.6423 5.9745 0.7650 2623 82.1759 3.3503 220.0533 2.1462 6.4550 1.2023 Print a simple summary of the standard FWI components. > summary(data_fwi[standard_components]) ffmc dmc dc isi Min. : 0.00 Min. : 0.000 Min. : 15.41 Min. : 0.0000 1st Qu.:67.87 1st Qu.: 5.925 1st Qu.: 72.28 1st Qu.: 0.7877 Median :79.38 Median :16.461 Median :133.06 Median : 1.3958 Mean :70.62 Mean :17.487 Mean :136.12 Mean : 2.1582 3rd Qu.:85.18 3rd Qu.:26.511 3rd Qu.:188.64 3rd Qu.: 2.9785 Max. :94.40 Max. :50.174 Max. :292.95 Max. :17.5958 bui fwi Min. : 0.000 Min. : 0.000 1st Qu.: 8.408 1st Qu.: 0.422 Median :22.623 Median : 2.408 Mean :23.972 Mean : 3.877 3rd Qu.:34.605 3rd Qu.: 5.930 Max. :66.148 Max. :25.135 Calculate daily summaries Calculate outputs like peak burn time and number of hours of spread potential. Details about the daily summaries function can be found at FWI2025 - R#daily-summaries . report <- generate_daily_summaries(data_fwi) Print a simple summary of the daily report. > daily_components <- c(\"peak_hr\", \"duration\", \"isi_smooth\", \"dsr\") > summary(report[daily_components]) peak_hr duration isi_smooth dsr Min. :13.00 Min. : 0.000 Min. : 0.000 Min. :0.0000 1st Qu.:17.00 1st Qu.: 0.000 1st Qu.: 1.234 1st Qu.:0.0338 Median :17.00 Median : 0.000 Median : 4.032 Median :0.9913 Mean :17.29 Mean : 2.697 Mean : 4.324 Mean :1.5533 3rd Qu.:18.00 3rd Qu.: 5.000 3rd Qu.: 6.495 3rd Qu.:2.5940 Max. :23.00 Max. :14.000 Max. :15.771 Max. :6.9486 From here, the outputs can be converted to any datatype for further analysis or plotted for visualization. Appendix: Timezones This section will cover how to calculate a timezone based on a location (latitude and longitude) and date. Note that this is not necessarily a substitute for actual information about the time used in a dataset. The CFFDRS Weather Guide specifies to collect data by local standard time, which is different in many places due to the shift to daylight time in summer months (daylight savings). The 'lutz' library has functions to get the timezone of the weather station based on latitude and longitude. library(lutz) First, make a dataframe of stations with unique ID, latitude, and longitude. stations <- unique(data[c(\"id\", \"lat\", \"long\")]) Print the unique station IDs and coordinates. For this dataset the only station is at Petawawa Research Forest (PRF). > stations id lat long 1 PRF 45.996 -77.427 Find the timezone based on latitude and longitude, this can take some time. You may need to download the package 'sf' for method = \"accurate\". tz_loc <- tz_lookup_coords(stations$lat, stations$long, method = \"accurate\") Print the timezone location. PRF is equivalent to \"America/Toronto\". > tz_loc [1] \"America/Toronto\" The UTC offset can then be determined from the timezone location. utc <- tz_offset(\"2007-05-10\", tz_loc)[[5]] Print the UTC offset. > utc [1] -4 Since May 10, 2007 is during daylight savings the UTC offset calculated above corresponds to Eastern Daylight Time (EDT), UTC-4. This matches the timezone column provided since this data was collected using EDT. For Eastern Standard Time (EST), the UTC offset would be UTC-5.","title":"Hourly FWI R"},{"location":"tutorials/Hourly_FWI_R/#hourly-fwi-tutorial-r","text":"Last updated: September 10th, 2025","title":"Hourly FWI Tutorial - R"},{"location":"tutorials/Hourly_FWI_R/#what-youll-need","text":"The following files can be found on the cffdrs-ng GitHub repository : data/ PRF2007_hourly_wx.csv FWI/ R/ tutorial/ tutorial_hourly_FWI.r NG_FWI.r util.r daily_summaries.r If you are unfamiliar with GitHub, there are many options for you to retrieve the code and data files: Download each file to your computer individually. On the file's GitHub page (e.g. PRF2007_hourly_wx.csv ), find the \"More file actions\" button at the top-right side of the website (denoted \"...\"), and select \"Download\". This will begin downloading based on your browser settings. Repeat this for every file. Download the whole repository to your computer. See the GitHub documentation for more information. Clone the whole repository to your computer with Git. See the GitHub documentation for more information. Fork the repository to create a new repository on GitHub. See the GitHub documentation for more information. Besides the files, ensure you have the required R packages, which are listed at FWI2025_R#packages .","title":"What you'll need"},{"location":"tutorials/Hourly_FWI_R/#data","text":"PRF2007_hourly_wx.csv contains hourly weather recorded from a Petawawa Research Forest (PRF) weather station during the 2007 field season. The data has no gaps and is sorted sequentially by time, which is a requirement for FWI2025 input data. If you would like guidance on how to fill in missing weather data for your situation, check the CFFDRS Weather Guide or reach out to us ! The column headers are those required for hourly FWI calculations, details of which can be found at FWI2025_R#input-data . Grassland curing ( percent_cured ) and solar radiation ( solrad ) are not included, but these are optional inputs and they will be automatically calculated if not provided.","title":"Data"},{"location":"tutorials/Hourly_FWI_R/#steps","text":"Open the tutorial_hourly_FWI.r code file. You can either follow the code and comments in the file or continue on this page (both include the same code and content).","title":"Steps"},{"location":"tutorials/Hourly_FWI_R/#load-libraries","text":"Run install.packages() to install any you are missing library(lubridate) library(data.table)","title":"Load libraries"},{"location":"tutorials/Hourly_FWI_R/#load-functions-and-data","text":"Check your current working directory getwd() If the working directory is different from where you saved the FWI2025 scripts, change the working directory with setwd() to that folder. Load the files containing the functions and variables to calculate FWI2025. source(\"NG_FWI.r\") source(\"util.r\") source(\"daily_summaries.r\") Load the input weather station data file. Specify the file path if PRF2007_hourly_wx.csv is not in the working directory data <- read.csv(\"PRF2007_hourly_wx.csv\") Print the column names, data should contain 12 columns > names(data) [1] \"id\" \"lat\" \"long\" \"timezone\" \"yr\" \"mon\" [7] \"day\" \"hr\" \"temp\" \"rh\" \"ws\" \"prec\" Previously, the timezone (UTC offset) was a function parameter and calculated from latitude and longitude. Now it is a data frame column and provided. See the appendix of this tutorial for extra information on how to calculate the timezone, along with the extra information required about the dataset.","title":"Load functions and data"},{"location":"tutorials/Hourly_FWI_R/#run-fwi2025","text":"hFWI() is the function that calculates hourly FWI codes in FWI2025. Details about it can be found at FWI2025 - R#hourly-fwi . It can handle multiple stations and years/fire seasons (not shown in this tutorial). Default FWI start-up code values are: ffmc_old = 85, dmc_old = 6, dc_old = 15. data_fwi <- hFWI(data) Output is a data.frame (matching input class), with FWI calculations appended after the input columns. Save the output as a .csv file (overrides any preexisting file). write.csv(data_fwi, \"PRF2007_hourly_FWI.csv\", row.names = FALSE) Print the last two rows of the standard moisture codes and fire behaviour indices. > standard_components <- c(\"ffmc\", \"dmc\", \"dc\", \"isi\", \"bui\", \"fwi\") > tail(data_fwi[standard_components], 2) ffmc dmc dc isi bui fwi 2622 80.2669 3.0924 219.5169 1.6423 5.9745 0.7650 2623 82.1759 3.3503 220.0533 2.1462 6.4550 1.2023 Print a simple summary of the standard FWI components. > summary(data_fwi[standard_components]) ffmc dmc dc isi Min. : 0.00 Min. : 0.000 Min. : 15.41 Min. : 0.0000 1st Qu.:67.87 1st Qu.: 5.925 1st Qu.: 72.28 1st Qu.: 0.7877 Median :79.38 Median :16.461 Median :133.06 Median : 1.3958 Mean :70.62 Mean :17.487 Mean :136.12 Mean : 2.1582 3rd Qu.:85.18 3rd Qu.:26.511 3rd Qu.:188.64 3rd Qu.: 2.9785 Max. :94.40 Max. :50.174 Max. :292.95 Max. :17.5958 bui fwi Min. : 0.000 Min. : 0.000 1st Qu.: 8.408 1st Qu.: 0.422 Median :22.623 Median : 2.408 Mean :23.972 Mean : 3.877 3rd Qu.:34.605 3rd Qu.: 5.930 Max. :66.148 Max. :25.135","title":"Run FWI2025"},{"location":"tutorials/Hourly_FWI_R/#calculate-daily-summaries","text":"Calculate outputs like peak burn time and number of hours of spread potential. Details about the daily summaries function can be found at FWI2025 - R#daily-summaries . report <- generate_daily_summaries(data_fwi) Print a simple summary of the daily report. > daily_components <- c(\"peak_hr\", \"duration\", \"isi_smooth\", \"dsr\") > summary(report[daily_components]) peak_hr duration isi_smooth dsr Min. :13.00 Min. : 0.000 Min. : 0.000 Min. :0.0000 1st Qu.:17.00 1st Qu.: 0.000 1st Qu.: 1.234 1st Qu.:0.0338 Median :17.00 Median : 0.000 Median : 4.032 Median :0.9913 Mean :17.29 Mean : 2.697 Mean : 4.324 Mean :1.5533 3rd Qu.:18.00 3rd Qu.: 5.000 3rd Qu.: 6.495 3rd Qu.:2.5940 Max. :23.00 Max. :14.000 Max. :15.771 Max. :6.9486 From here, the outputs can be converted to any datatype for further analysis or plotted for visualization.","title":"Calculate daily summaries"},{"location":"tutorials/Hourly_FWI_R/#appendix-timezones","text":"This section will cover how to calculate a timezone based on a location (latitude and longitude) and date. Note that this is not necessarily a substitute for actual information about the time used in a dataset. The CFFDRS Weather Guide specifies to collect data by local standard time, which is different in many places due to the shift to daylight time in summer months (daylight savings). The 'lutz' library has functions to get the timezone of the weather station based on latitude and longitude. library(lutz) First, make a dataframe of stations with unique ID, latitude, and longitude. stations <- unique(data[c(\"id\", \"lat\", \"long\")]) Print the unique station IDs and coordinates. For this dataset the only station is at Petawawa Research Forest (PRF). > stations id lat long 1 PRF 45.996 -77.427 Find the timezone based on latitude and longitude, this can take some time. You may need to download the package 'sf' for method = \"accurate\". tz_loc <- tz_lookup_coords(stations$lat, stations$long, method = \"accurate\") Print the timezone location. PRF is equivalent to \"America/Toronto\". > tz_loc [1] \"America/Toronto\" The UTC offset can then be determined from the timezone location. utc <- tz_offset(\"2007-05-10\", tz_loc)[[5]] Print the UTC offset. > utc [1] -4 Since May 10, 2007 is during daylight savings the UTC offset calculated above corresponds to Eastern Daylight Time (EDT), UTC-4. This matches the timezone column provided since this data was collected using EDT. For Eastern Standard Time (EST), the UTC offset would be UTC-5.","title":"Appendix: Timezones"}]}